buildscript {
    ext.kotlin_version = '1.4.0'
    repositories {
        mavenCentral()
        jcenter()
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    group = 'org.cf'

    ext {
        depends = [
                commons_lang   : 'org.apache.commons:commons-lang3:3.10',
                commons_cli    : 'commons-cli:commons-cli:1.4',
                findbugs       : 'com.google.code.findbugs:jsr305:3.0.1',
                guava          : 'com.google.guava:guava:28.2-jre',
                junit_compile  : 'org.junit.jupiter:junit-jupiter-api:5.6.1',
                junit_engine   : 'org.junit.jupiter:junit-jupiter-engine:5.6.1',
                junit_runner   : 'org.junit.platform:junit-platform-runner:1.6.1',
                mockito        : 'org.mockito:mockito-junit-jupiter:3.3.3',
                perfidix       : 'org.perfidix:perfidix:3.6.9',
                proguard_gradle: 'net.sf.proguard:proguard-gradle:6.2.2',
                slf4j_api      : 'org.slf4j:slf4j-api:1.7.30',
                slf4j_nop      : 'org.slf4j:slf4j-nop:1.7.30',
                trove4j        : 'net.sf.trove4j:trove4j:3.0.3',
        ]
    }

    if (project.name == 'simplify' || project.name == 'demoapp') {
        apply plugin: 'java'
        apply plugin: 'application'
    } else if (project.name == 'smalivm') {
        apply plugin: 'java-library'
        version = '1.3.0'
    } else {
        apply plugin: 'org.jetbrains.kotlin.jvm'
        apply plugin: 'application'
    }

    if (project.name != 'demoapp' && project.name != 'sdbg') {
        jacocoTestReport {
            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.fork = true
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        //options.incremental = false
    }

    if (project.name == 'simplify') {
        tasks.withType(Test) {
            maxParallelForks = 2
            minHeapSize = '128m'
            maxHeapSize = '4g'
            jvmArgs = ['-XX:-UseGCOverheadLimit']
        }
    } else {
        tasks.withType(Test) {
            maxParallelForks = Runtime.runtime.availableProcessors()
            if (System.env.TRAVIS == 'true') {
                testLogging {
                    // Print out test status to make it easier to debug problematic builds.
                    events "started", "passed", "skipped", "failed"
                }
            }
        }
    }
}


// These aren't intended to have tests and shouldn't count against code coverage
def reportProjects = (subprojects - project(':demoapp') - project(':sdbg'))
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(reportProjects.test)

    sourceDirectories.from = reportProjects.sourceSets.main.allJava.srcDirs
    //additionalSourceDirs.from = reportProjects.sourceSets.main.allJava.srcDirs
    classDirectories.from = reportProjects.sourceSets.main.output.classesDirs
    executionData.from = reportProjects.jacocoTestReport.executionData

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

coveralls {
    sourceDirs = reportProjects.sourceSets.main.allJava.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
